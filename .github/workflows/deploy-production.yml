name: Deploy to Production

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps || echo "No dependencies to install"

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: `Deployment of ${context.sha.substring(0, 7)}`
            });

            console.log('Deployment created:', deployment.data.id);
            return deployment.data.id;

      - name: Deploy to Production (simulated)
        run: |
          echo "Deploying application to production..."
          npm run deploy
          echo "Deployment completed successfully!"

      - name: Update deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = ${{ steps.create_deployment.outputs.result }};

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: 'success',
              environment: 'production',
              description: 'Deployment succeeded',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

            console.log('Deployment status updated to success');

      - name: Update deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = ${{ steps.create_deployment.outputs.result }};

            if (deploymentId) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: 'failure',
                environment: 'production',
                description: 'Deployment failed',
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });

              console.log('Deployment status updated to failure');
            }
